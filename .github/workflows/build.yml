name: Build Application

on: [push, pull_request]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Build local AI and install dependencies
        run: |
          python3 -m pip install setuptools --break-system-packages
          cd src/native
          npm install
          cd ../..
          npm install
          npm install ./externals/capacitor-background-mode
          npm run postinstall-electron

      - name: Build the application
        run: npm run package

      - name: Get version and commit hash
        id: get-version
        run: |
          node get-version.js
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        shell: bash


      - name: Rename and zip the build
        run: |
          mv release/build/win-unpacked "SDStudio-${{ env.version }}-${{ env.commit_hash }}-windows"
          7z a "SDStudio-${{ env.version }}-${{ env.commit_hash }}-windows.zip" "SDStudio-${{ env.version }}-${{ env.commit_hash }}-windows"

      - name: Upload Windows build
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: "SDStudio-${{ env.version }}-${{ env.commit_hash }}-windows.zip"
          if-no-files-found: error


  build-mac:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # - name: Decode and import the certificate
      #   env:
      #     MACOS_CERTIFICATE_P12: ${{ secrets.MACOS_CERTIFICATE_P12 }}
      #     MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
      #   run: |
      #     echo "$MACOS_CERTIFICATE_P12" | base64 --decode > certificate.p12
      #     security create-keychain -p "" build.keychain
      #     security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
      #     security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
      #
      # - name: Set up environment variables
      #   env:
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      #   run: echo "KEYCHAIN=build.keychain" >> $GITHUB_ENV
          # python3 -m pip install setuptools --break-system-packages

      - name: Install dependencies
        run: |
          python3 -m pip install setuptools --break-system-packages
          cd src/native
          rm package-lock.json
          npm install
          cd ../..
          cd release/app
          npm uninstall sharp
          npm install --platform=darwin --arch=x64 sharp@0.32.6
          npm rebuild --platform=darwin --arch=arm64 sharp@0.32.6
          cd ../..
          npm install
          npm install ./externals/capacitor-background-mode
          npm run postinstall-electron



      - name: Build the application
        run: npm run package

      - name: Get version and commit hash
        id: get-version
        run: |
          version=$(jq -r '.version' release/app/package.json)
          echo "version=$version" >> $GITHUB_ENV
          commit_hash=$(git rev-parse --short HEAD)
          echo "commit_hash=$commit_hash" >> $GITHUB_ENV

      - name: Rename DMG files
        run: |
          mv "release/build/SDStudio-${{ env.version }}-mac-x64.dmg" "release/build/SDStudio-${{ env.version }}-${{ env.commit_hash }}-mac-x64.dmg"
          mv "release/build/SDStudio-${{ env.version }}-mac-arm64.dmg" "release/build/SDStudio-${{ env.version }}-${{ env.commit_hash }}-mac-arm64.dmg"

      - name: Upload Mac build
        uses: actions/upload-artifact@v3
        with:
          name: mac-build
          path: "release/build/SDStudio-${{ env.version }}-${{ env.commit_hash }}-mac-*.dmg"
          if-no-files-found: error

  build-android:
    runs-on: ubuntu-latest

    env:
      JDK_VERSION: 17

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: ${{ env.JDK_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install npm dependencies
        run: |
          cp capacitor.config.deploy.ts capacitor.config.ts
          npm install
          npm install ./externals/capacitor-background-mode

      - name: Get version and commit hash
        id: get-version
        run: |
          version=$(jq -r '.version' release/app/package.json)
          echo "version=$version" >> $GITHUB_ENV
          commit_hash=$(git rev-parse --short HEAD)
          echo "commit_hash=$commit_hash" >> $GITHUB_ENV

      - name: Build Web
        run: npm run build-vite

      - name: Build Capacitor Android Project
        run: npx cap sync android

      - name: Build the Android app
        run: |
          cd android
          ./gradlew bundle && ./gradlew assembleRelease

      - name: Setup build tool version variable
        shell: bash
        run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
          echo Last build tool version is: $BUILD_TOOL_VERSION

      - uses: r0adkll/sign-android-release@v1
        name: Sign app APK
        id: sign_app
        with:
          releaseDirectory: android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

      - name: Rename apk file
        run: |
          mv ${{steps.sign_app.outputs.signedReleaseFile}} "SDStudio-${{ env.version }}-${{ env.commit_hash }}-android.apk"

      - name: Upload Android build
        uses: actions/upload-artifact@v3
        with:
          name: android-build
          path: "SDStudio-${{ env.version }}-${{ env.commit_hash }}-android.apk"
          if-no-files-found: error

  create-release:
    needs: [build-windows, build-mac, build-android]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Windows build artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-build
          path: ./dist

      - name: Download macOS build artifact
        uses: actions/download-artifact@v3
        with:
          name: mac-build
          path: ./dist

      - name: Download Android build artifact
        uses: actions/download-artifact@v2
        with:
          name: android-build
          path: ./dist

      - name: Get version and commit hash
        id: get-version
        run: |
          version=$(jq -r '.version' release/app/package.json)
          echo "version=$version" >> $GITHUB_ENV
          commit_hash=$(git rev-parse --short HEAD)
          echo "commit_hash=$commit_hash" >> $GITHUB_ENV

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.version }}"
          release_name: "${{ env.version }}"
          draft: true
          prerelease: false

      - name: Upload Windows build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/SDStudio-${{ env.version }}-${{ env.commit_hash }}-windows.zip
          asset_name: SDStudio-${{ env.version }}-${{ env.commit_hash }}-windows.zip
          asset_content_type: application/zip

      - name: Upload macOS x64 build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/SDStudio-${{ env.version }}-${{ env.commit_hash }}-mac-x64.dmg
          asset_name: SDStudio-${{ env.version }}-${{ env.commit_hash }}-mac-x64.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload macOS arm64 build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/SDStudio-${{ env.version }}-${{ env.commit_hash }}-mac-arm64.dmg
          asset_name: SDStudio-${{ env.version }}-${{ env.commit_hash }}-mac-arm64.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload Android build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/SDStudio-${{ env.version }}-${{ env.commit_hash }}-android.apk
          asset_name: SDStudio-${{ env.version }}-${{ env.commit_hash }}-android.apk
          asset_content_type: application/vnd.android.package-archive
